---
# Source: helm-final-project/templates/namespace.yaml
apiVersion: v1
kind: Namespace
metadata:
  labels:
    name: final-project-namespace
  name: final-project
---
# Source: helm-final-project/templates/serviceAccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: final-project-sa
  namespace: final-project
---
# Source: helm-final-project/templates/bd-postgres/1- secrets.yaml
kind: Secret
apiVersion: v1
metadata:
  name: bd-postgres-secret
  namespace: final-project
type: Opaque
data:
  POSTGRES_DB: bXlkYXRhYmFzZQ==
  POSTGRES_USER: dXNlcm5hbWU=
  POSTGRES_PASSWORD: cGFzc3dvcmQ=
---
# Source: helm-final-project/templates/app-database/configMap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-database-configmap
  namespace: final-project
data:
  TRACK_MODIFICATIONS: 'False'
---
# Source: helm-final-project/templates/bd-postgres/configMap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: bd-postgres-configmap
  namespace: final-project
data:
  init.sql:     CREATE TABLE IF NOT EXISTS users (id SERIAL PRIMARY KEY,name VARCHAR(50) NOT NULL,age INTEGER NOT NULL);
---
# Source: helm-final-project/templates/persistentVolume.yaml
apiVersion: v1
kind: PersistentVolume
metadata:
  name: final-project-volumen-pv
spec:
  accessModes:
    - ReadWriteOnce # El volumen puede ser montado como read-write por un unico nodo
  capacity:
    storage: 2Gi
  hostPath:
    path: /data/pv0001/ # https://minikube.sigs.k8s.io/docs/handbook/persistent_volumes/
---
# Source: helm-final-project/templates/bd-postgres/persistentVolumeClaim.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: final-project-volumen-postgres  
  namespace: final-project
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: ""
  volumeName: final-project-volumen-pv 
  resources:
    requests:
      storage: 1Gi
---
# Source: helm-final-project/templates/pod-list/rbac/clusterRole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  # "namespace" omitted since ClusterRoles are not namespaced
  name: pod-list-reader
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "watch", "list"]
---
# Source: helm-final-project/templates/pod-list/rbac/clusterRoleBinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: pod-list-clusterrolebinding
subjects:
- kind: ServiceAccount # <-
  name: final-project-sa
  namespace: final-project
roleRef:
  kind: ClusterRole # <-
  name: pod-list-reader
  apiGroup: rbac.authorization.k8s.io
---
# Source: helm-final-project/templates/app-contador/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: app-contador-service 
  namespace: final-project
spec:
  type: ClusterIP
  ports:
    - protocol: TCP
      port: 8080   # <- Prestar atencion
      targetPort: 8000
  selector:
    appName: app-contador
---
# Source: helm-final-project/templates/app-database/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: app-database-service 
  namespace: final-project
spec:
  type: ClusterIP
  ports:
    - protocol: TCP
      port: 5000 
      targetPort: 5000
  selector:
    appName: app-database
---
# Source: helm-final-project/templates/app-saludo/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: app-saludo-service 
  namespace: final-project
spec:
  type: ClusterIP
  ports:
    - protocol: TCP
      port: 8081 
      targetPort: 8000
  selector:
    appName: app-saludo
---
# Source: helm-final-project/templates/bd-postgres/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: bd-postgres-service 
  namespace: final-project
spec:
  type: ClusterIP
  ports:
    - protocol: TCP
      port: 5432 
      targetPort: 5432
  selector:
    appName: bd-postgres
---
# Source: helm-final-project/templates/pod-list/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: pod-list-service 
  namespace: final-project
spec:
  type: ClusterIP
  ports:
    - protocol: TCP
      port: 80 
      targetPort: 8080
  selector:
    appName: pod-list
---
# Source: helm-final-project/templates/app-contador/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app-contador-deployment 
  namespace: final-project
  labels:
    appName: app-contador
spec:
  replicas: 1
  selector:
    matchLabels:
      appName: app-contador
  template:
    metadata:
      labels:
        appName: app-contador
    spec:
      containers: # <- ¡Multi-container pod! La app hace consultas al redis en localhost
      - name: app-contador
        image: matiops/intro-k8s:app-contador
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
      - name: app-contador-redis
        image: redis
        ports:
        - containerPort: 6379
---
# Source: helm-final-project/templates/app-database/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app-database-deployment
  namespace: final-project
  labels:
    app: app-database
spec:
  replicas: 1
  selector:
    matchLabels:
      appName: app-database
  template:
    metadata:
      labels:
        appName: app-database
    spec:
      containers:
      - name: app-database
        image: frangil14/web-service-flask:1.0.0
        imagePullPolicy: Always
        ports:
        - containerPort: 5000
        envFrom:
        - secretRef:
            name: bd-postgres-secret
        - configMapRef:
            name: app-database-configmap
        env:
        - name: DATABASE_URI
          value: postgresql://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@bd-postgres-service:5432/$(POSTGRES_DB)
---
# Source: helm-final-project/templates/app-saludo/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app-saludo-deployment 
  namespace: final-project
  labels:
    app: app-saludo
spec:
  replicas: 1
  selector:
    matchLabels:
      appName: app-saludo
  template:
    metadata:
      labels:
        appName: app-saludo
    spec:
      containers:
      - name: app-saludo
        image: matiops/intro-k8s:app-saludo
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
---
# Source: helm-final-project/templates/bd-postgres/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: bd-postgres-deployment
  namespace: final-project
  labels:
    app: bd-postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      appName: bd-postgres
  template:
    metadata:
      labels:
        appName: bd-postgres
    spec:
      containers:
      - name: bd-postgres
        image: postgres:13.13-alpine3.17
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 5432
        envFrom:
        - secretRef:
            name: bd-postgres-secret
        command: [ "bash", "-c" ]
        args:
          - |
            /usr/local/bin/docker-entrypoint.sh postgres &

            until pg_isready -h localhost -p 5432 -U "$POSTGRES_USER"; do
              echo "Waiting for PostgreSQL to be ready..."
              sleep 2
            done

            if [ -f /docker-entrypoint-initdb.d/init.sql ]; then
              echo "Running initialization script..."
              psql -U "$POSTGRES_USER" -d "$POSTGRES_DB" -f /docker-entrypoint-initdb.d/init.sql
            fi

            wait
        volumeMounts:
        - name: postgresdata
          mountPath: /var/lib/postgresql/data
        - name: init-scripts
          mountPath: /docker-entrypoint-initdb.d
      volumes:
      - name: postgresdata
        persistentVolumeClaim:
          claimName: final-project-volumen-postgres
      - name: init-scripts
        configMap:
          name: bd-postgres-configmap
---
# Source: helm-final-project/templates/pod-list/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pod-list-deployment
  namespace: final-project
  labels:
    app: pod-list
spec:
  replicas: 1
  selector:
    matchLabels:
      appName: pod-list
  template:
    metadata:
      labels:
        appName: pod-list
    spec:
      containers:
      - name: pod-list
        image: shayulmer/kubernetes-pods-extractor:latest
      serviceAccountName: final-project-sa
---
# Source: helm-final-project/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: final-project-ingress
  namespace: final-project
  annotations: 
    nginx.ingress.kubernetes.io/rewrite-target: /$2
spec:
  ingressClassName: nginx
  rules:
  - host: finalproject 
    http:
      paths:
      - path: /app-contador
        pathType: Prefix
        backend:
          service: # <- Indicamos a cual service dirigir la query para esta regla
            name: app-contador-service 
            port:
              number: 8080
      - path: /app-saludo(/|$)(.*) 
        pathType: ImplementationSpecific # <- Necesario para implementar el path rewrite. Surge de la documentación
        backend:
          service:
            name: app-saludo-service 
            port:
              number: 8081 
      - path: /pod-list 
        pathType: Prefix 
        backend:
          service:
            name: pod-list-service 
            port:
              number: 80 
      - path: /app-database(/|$)(.*)
        pathType: ImplementationSpecific
        backend:
          service: 
            name: app-database-service 
            port:
              number: 5000
