apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.bdPostgres.name }}-deployment
  namespace: {{ .Values.namespace }}
  labels:
    app: {{ .Values.bdPostgres.name }}
spec:
  replicas: {{ .Values.bdPostgres.replicaCount }}
  selector:
    matchLabels:
      appName: {{ .Values.bdPostgres.name }}
  template:
    metadata:
      labels:
        appName: {{ .Values.bdPostgres.name }}
    spec:
      containers:
      - name: {{ .Values.bdPostgres.name }}
        image: {{ .Values.bdPostgres.image }}
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: {{ .Values.bdPostgres.containerPort }}
        envFrom:
        - secretRef:
            name: {{ .Values.bdPostgres.name }}-secret
        command: [ "bash", "-c" ]
        args:
          - |
            /usr/local/bin/docker-entrypoint.sh postgres &

            until pg_isready -h localhost -p 5432 -U "$POSTGRES_USER"; do
              echo "Waiting for PostgreSQL to be ready..."
              sleep 2
            done

            if [ -f /docker-entrypoint-initdb.d/init.sql ]; then
              echo "Running initialization script..."
              psql -U "$POSTGRES_USER" -d "$POSTGRES_DB" -f /docker-entrypoint-initdb.d/init.sql
            fi

            wait
        volumeMounts:
        - name: {{ .Values.bdPostgres.volumeMountName }}
          mountPath: /var/lib/postgresql/data
        - name: init-scripts
          mountPath: /docker-entrypoint-initdb.d
      volumes:
      - name: {{ .Values.bdPostgres.volumeMountName }}
        persistentVolumeClaim:
          claimName: {{ .Values.namespace }}-volumen-postgres
      - name: init-scripts
        configMap:
          name: {{ .Values.bdPostgres.name }}-configmap
      tolerations: 
      - key: "disk"
        operator: "Equal"
        value: "ssh"
        effect: "NoSchedule"